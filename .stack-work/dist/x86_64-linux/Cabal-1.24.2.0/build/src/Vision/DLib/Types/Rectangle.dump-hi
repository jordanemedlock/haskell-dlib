
==================== FINAL INTERFACE ====================
2017-06-12 20:35:46.106517 UTC

interface haskell-dlib-0.1.0.0-3fllyVSnE7s1R7uPGXF8Jy:Vision.DLib.Types.Rectangle 8002
  interface hash: 0fcea100b62ed26a3fd5b004ee4109f2
  ABI hash: a49ce78cdd9f0cfe3dacd1713c8f643e
  export-list hash: 956f9e1148816dda05f4a24c5fb4a0db
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0c27dff259dcb485104767cde3c16bf8
  sig of: Nothing
  used TH splices: False
  where
exports:
  Vision.DLib.Types.Rectangle.Rectangle{Vision.DLib.Types.Rectangle.Rectangle rectBottom rectLeft rectRight rectTop}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Foreign.C.Types bf568ee9a3ec4aa42333a0da5f4345de
import  -/  base-4.9.1.0:Foreign.Ptr 436587875917047a95f3be0fc1891fc4
import  -/  base-4.9.1.0:Foreign.Storable 085c8d7f42ceec1dbb4e818f06339b9d
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Ptr 427a6ad9312f04edb98e0f5b7c4e2596
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
d582a1c3f75b6044ab2b367fcbe4f3e2
  $fShowRectangle ::
    GHC.Show.Show Vision.DLib.Types.Rectangle.Rectangle
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Vision.DLib.Types.Rectangle.Rectangle
                  Vision.DLib.Types.Rectangle.$fShowRectangle_$cshowsPrec
                  Vision.DLib.Types.Rectangle.$fShowRectangle_$cshow
                  Vision.DLib.Types.Rectangle.$fShowRectangle_$cshowList -}
d582a1c3f75b6044ab2b367fcbe4f3e2
  $fShowRectangle1 ::
    Vision.DLib.Types.Rectangle.Rectangle -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Vision.DLib.Types.Rectangle.Rectangle)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Vision.DLib.Types.Rectangle.Rectangle ww1 ww2 ww3 ww4 ->
                 Vision.DLib.Types.Rectangle.$w$cshowsPrec
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   w1 }) -}
ed5de5ba94000f161e0a44f1dc29569e
  $fShowRectangle2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Rectangle {"#) -}
ef4621693a3572b02074cdf29ccba7a8
  $fShowRectangle3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
1adbcc155499487a68c1e61ec945babf
  $fShowRectangle4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "rectBottom = "#) -}
850a1692602b995140c81d4a4cbcf75b
  $fShowRectangle5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "rectRight = "#) -}
aee8ae159c1fa4c66e1f3b73baf56d08
  $fShowRectangle6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "rectTop = "#) -}
689e3b4398e661e3e18ca421ce03c8aa
  $fShowRectangle7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
3b14074e0fd7decf8e8584ada7a9e3ba
  $fShowRectangle8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "rectLeft = "#) -}
d582a1c3f75b6044ab2b367fcbe4f3e2
  $fShowRectangle_$cshow ::
    Vision.DLib.Types.Rectangle.Rectangle -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Vision.DLib.Types.Rectangle.Rectangle) ->
                 Vision.DLib.Types.Rectangle.$fShowRectangle_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d582a1c3f75b6044ab2b367fcbe4f3e2
  $fShowRectangle_$cshowList ::
    [Vision.DLib.Types.Rectangle.Rectangle] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Vision.DLib.Types.Rectangle.Rectangle
                   Vision.DLib.Types.Rectangle.$fShowRectangle1) -}
d582a1c3f75b6044ab2b367fcbe4f3e2
  $fShowRectangle_$cshowsPrec ::
    GHC.Types.Int
    -> Vision.DLib.Types.Rectangle.Rectangle -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U(U),1*U(U),1*U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Vision.DLib.Types.Rectangle.Rectangle)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Vision.DLib.Types.Rectangle.Rectangle ww3 ww4 ww5 ww6 ->
                 Vision.DLib.Types.Rectangle.$w$cshowsPrec
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   w2 } }) -}
d582a1c3f75b6044ab2b367fcbe4f3e2
  $fStorableRectangle ::
    Foreign.Storable.Storable Vision.DLib.Types.Rectangle.Rectangle
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Vision.DLib.Types.Rectangle.Rectangle
                  Vision.DLib.Types.Rectangle.$fStorableRectangle_$csizeOf
                  Vision.DLib.Types.Rectangle.$fStorableRectangle_$calignment
                  Vision.DLib.Types.Rectangle.$fStorableRectangle_$cpeekElemOff
                  Vision.DLib.Types.Rectangle.$fStorableRectangle_$cpokeElemOff
                  Vision.DLib.Types.Rectangle.$fStorableRectangle_$cpeekByteOff
                  Vision.DLib.Types.Rectangle.$fStorableRectangle_$cpokeByteOff
                  Vision.DLib.Types.Rectangle.$fStorableRectangle_$cpeek
                  Vision.DLib.Types.Rectangle.$fStorableRectangle_$cpoke -}
d582a1c3f75b6044ab2b367fcbe4f3e2
  $fStorableRectangle1 ::
    GHC.Ptr.Ptr Vision.DLib.Types.Rectangle.Rectangle
    -> Vision.DLib.Types.Rectangle.Rectangle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S(S)S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U),1*U(U))><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ptr :: GHC.Ptr.Ptr Vision.DLib.Types.Rectangle.Rectangle)
                   (ds :: Vision.DLib.Types.Rectangle.Rectangle)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { Vision.DLib.Types.Rectangle.Rectangle l t r b ->
                 case ptr
                        `cast`
                      (GHC.Ptr.Ptr
                         <Vision.DLib.Types.Rectangle.Rectangle, GHC.Int.Int64>)_R of wild1 { GHC.Ptr.Ptr a ->
                 case l `cast`
                      (Foreign.C.Types.N:CLong[0]) of wild2 { GHC.Int.I64# x ->
                 case GHC.Prim.writeInt64OffAddr#
                        @ GHC.Prim.RealWorld
                        a
                        0#
                        x
                        eta of s2 { DEFAULT ->
                 case t `cast`
                      (Foreign.C.Types.N:CLong[0]) of wild3 { GHC.Int.I64# x1 ->
                 case GHC.Prim.writeInt64OffAddr#
                        @ GHC.Prim.RealWorld
                        a
                        1#
                        x1
                        s2 of s1 { DEFAULT ->
                 case r `cast`
                      (Foreign.C.Types.N:CLong[0]) of wild4 { GHC.Int.I64# x2 ->
                 case GHC.Prim.writeInt64OffAddr#
                        @ GHC.Prim.RealWorld
                        a
                        2#
                        x2
                        s1 of s3 { DEFAULT ->
                 case b `cast`
                      (Foreign.C.Types.N:CLong[0]) of wild5 { GHC.Int.I64# x3 ->
                 case GHC.Prim.writeInt64OffAddr#
                        @ GHC.Prim.RealWorld
                        a
                        3#
                        x3
                        s3 of s4 { DEFAULT ->
                 (# s4, GHC.Tuple.() #) } } } } } } } } } }) -}
d582a1c3f75b6044ab2b367fcbe4f3e2
  $fStorableRectangle2 ::
    GHC.Ptr.Ptr Vision.DLib.Types.Rectangle.Rectangle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Vision.DLib.Types.Rectangle.Rectangle #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ptr :: GHC.Ptr.Ptr Vision.DLib.Types.Rectangle.Rectangle)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr
                        `cast`
                      (GHC.Ptr.Ptr
                         <Vision.DLib.Types.Rectangle.Rectangle, GHC.Int.Int64>)_R of wild { GHC.Ptr.Ptr a ->
                 case GHC.Prim.readInt64OffAddr#
                        @ GHC.Prim.RealWorld
                        a
                        0#
                        eta of ds2 { (#,#) ipv ipv1 ->
                 case GHC.Prim.readInt64OffAddr#
                        @ GHC.Prim.RealWorld
                        a
                        1#
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.readInt64OffAddr#
                        @ GHC.Prim.RealWorld
                        a
                        2#
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.readInt64OffAddr#
                        @ GHC.Prim.RealWorld
                        a
                        3#
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 (# ipv6,
                    Vision.DLib.Types.Rectangle.Rectangle
                      (GHC.Int.I64# ipv1) `cast` (Sym (Foreign.C.Types.N:CLong[0]))
                      (GHC.Int.I64# ipv5) `cast` (Sym (Foreign.C.Types.N:CLong[0]))
                      (GHC.Int.I64# ipv3) `cast` (Sym (Foreign.C.Types.N:CLong[0]))
                      (GHC.Int.I64# ipv7)
                        `cast`
                      (Sym (Foreign.C.Types.N:CLong[0])) #) } } } } }) -}
d582a1c3f75b6044ab2b367fcbe4f3e2
  $fStorableRectangle3 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Vision.DLib.Types.Rectangle.Rectangle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S(S)S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U),1*U(U))><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: Vision.DLib.Types.Rectangle.Rectangle)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case eta of wild { Vision.DLib.Types.Rectangle.Rectangle l t r b1 ->
                 case ptr of wild1 { GHC.Ptr.Ptr addr ->
                 case off of wild2 { GHC.Types.I# d ->
                 case l `cast`
                      (Foreign.C.Types.N:CLong[0]) of wild3 { GHC.Int.I64# x ->
                 let {
                   a :: GHC.Prim.Addr# = GHC.Prim.plusAddr# addr d
                 } in
                 case GHC.Prim.writeInt64OffAddr#
                        @ GHC.Prim.RealWorld
                        a
                        0#
                        x
                        eta1 of s2 { DEFAULT ->
                 case t `cast`
                      (Foreign.C.Types.N:CLong[0]) of wild4 { GHC.Int.I64# x1 ->
                 case GHC.Prim.writeInt64OffAddr#
                        @ GHC.Prim.RealWorld
                        a
                        1#
                        x1
                        s2 of s1 { DEFAULT ->
                 case r `cast`
                      (Foreign.C.Types.N:CLong[0]) of wild5 { GHC.Int.I64# x2 ->
                 case GHC.Prim.writeInt64OffAddr#
                        @ GHC.Prim.RealWorld
                        a
                        2#
                        x2
                        s1 of s3 { DEFAULT ->
                 case b1
                        `cast`
                      (Foreign.C.Types.N:CLong[0]) of wild6 { GHC.Int.I64# x3 ->
                 case GHC.Prim.writeInt64OffAddr#
                        @ GHC.Prim.RealWorld
                        a
                        3#
                        x3
                        s3 of s4 { DEFAULT ->
                 (# s4, GHC.Tuple.() #) } } } } } } } } } } }) -}
d582a1c3f75b6044ab2b367fcbe4f3e2
  $fStorableRectangle4 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Vision.DLib.Types.Rectangle.Rectangle #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 let {
                   a :: GHC.Prim.Addr# = GHC.Prim.plusAddr# addr d
                 } in
                 case GHC.Prim.readInt64OffAddr#
                        @ GHC.Prim.RealWorld
                        a
                        0#
                        eta of ds2 { (#,#) ipv ipv1 ->
                 case GHC.Prim.readInt64OffAddr#
                        @ GHC.Prim.RealWorld
                        a
                        1#
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.readInt64OffAddr#
                        @ GHC.Prim.RealWorld
                        a
                        2#
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.readInt64OffAddr#
                        @ GHC.Prim.RealWorld
                        a
                        3#
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 (# ipv6,
                    Vision.DLib.Types.Rectangle.Rectangle
                      (GHC.Int.I64# ipv1) `cast` (Sym (Foreign.C.Types.N:CLong[0]))
                      (GHC.Int.I64# ipv5) `cast` (Sym (Foreign.C.Types.N:CLong[0]))
                      (GHC.Int.I64# ipv3) `cast` (Sym (Foreign.C.Types.N:CLong[0]))
                      (GHC.Int.I64# ipv7)
                        `cast`
                      (Sym (Foreign.C.Types.N:CLong[0])) #) } } } } } }) -}
d582a1c3f75b6044ab2b367fcbe4f3e2
  $fStorableRectangle5 ::
    GHC.Ptr.Ptr Vision.DLib.Types.Rectangle.Rectangle
    -> GHC.Types.Int
    -> Vision.DLib.Types.Rectangle.Rectangle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S(S)S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U),1*U(U))><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (ptr :: GHC.Ptr.Ptr Vision.DLib.Types.Rectangle.Rectangle)
                   (off :: GHC.Types.Int)
                   (val :: Vision.DLib.Types.Rectangle.Rectangle)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case val of wild { Vision.DLib.Types.Rectangle.Rectangle l t r b ->
                 case ptr of wild1 { GHC.Ptr.Ptr addr ->
                 case off of wild2 { GHC.Types.I# x ->
                 case l `cast`
                      (Foreign.C.Types.N:CLong[0]) of wild3 { GHC.Int.I64# x1 ->
                 let {
                   a :: GHC.Prim.Addr# = GHC.Prim.plusAddr# addr (GHC.Prim.*# x 32#)
                 } in
                 case GHC.Prim.writeInt64OffAddr#
                        @ GHC.Prim.RealWorld
                        a
                        0#
                        x1
                        eta of s2 { DEFAULT ->
                 case t `cast`
                      (Foreign.C.Types.N:CLong[0]) of wild4 { GHC.Int.I64# x2 ->
                 case GHC.Prim.writeInt64OffAddr#
                        @ GHC.Prim.RealWorld
                        a
                        1#
                        x2
                        s2 of s1 { DEFAULT ->
                 case r `cast`
                      (Foreign.C.Types.N:CLong[0]) of wild5 { GHC.Int.I64# x3 ->
                 case GHC.Prim.writeInt64OffAddr#
                        @ GHC.Prim.RealWorld
                        a
                        2#
                        x3
                        s1 of s3 { DEFAULT ->
                 case b `cast`
                      (Foreign.C.Types.N:CLong[0]) of wild6 { GHC.Int.I64# x4 ->
                 case GHC.Prim.writeInt64OffAddr#
                        @ GHC.Prim.RealWorld
                        a
                        3#
                        x4
                        s3 of s4 { DEFAULT ->
                 (# s4, GHC.Tuple.() #) } } } } } } } } } } }) -}
d582a1c3f75b6044ab2b367fcbe4f3e2
  $fStorableRectangle6 ::
    GHC.Ptr.Ptr Vision.DLib.Types.Rectangle.Rectangle
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Vision.DLib.Types.Rectangle.Rectangle #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ptr :: GHC.Ptr.Ptr Vision.DLib.Types.Rectangle.Rectangle)
                   (off :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# x ->
                 let {
                   a :: GHC.Prim.Addr# = GHC.Prim.plusAddr# addr (GHC.Prim.*# x 32#)
                 } in
                 case GHC.Prim.readInt64OffAddr#
                        @ GHC.Prim.RealWorld
                        a
                        0#
                        eta of ds2 { (#,#) ipv ipv1 ->
                 case GHC.Prim.readInt64OffAddr#
                        @ GHC.Prim.RealWorld
                        a
                        1#
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.readInt64OffAddr#
                        @ GHC.Prim.RealWorld
                        a
                        2#
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.readInt64OffAddr#
                        @ GHC.Prim.RealWorld
                        a
                        3#
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 (# ipv6,
                    Vision.DLib.Types.Rectangle.Rectangle
                      (GHC.Int.I64# ipv1) `cast` (Sym (Foreign.C.Types.N:CLong[0]))
                      (GHC.Int.I64# ipv5) `cast` (Sym (Foreign.C.Types.N:CLong[0]))
                      (GHC.Int.I64# ipv3) `cast` (Sym (Foreign.C.Types.N:CLong[0]))
                      (GHC.Int.I64# ipv7)
                        `cast`
                      (Sym (Foreign.C.Types.N:CLong[0])) #) } } } } } }) -}
cd36097823304cb002f77c3e93b747b7
  $fStorableRectangle7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
934e5f644b5ac0e2dbbabbd57079bec7
  $fStorableRectangle8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 32#) -}
d582a1c3f75b6044ab2b367fcbe4f3e2
  $fStorableRectangle_$calignment ::
    Vision.DLib.Types.Rectangle.Rectangle -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Vision.DLib.Types.Rectangle.Rectangle) ->
                 Vision.DLib.Types.Rectangle.$fStorableRectangle7) -}
d582a1c3f75b6044ab2b367fcbe4f3e2
  $fStorableRectangle_$cpeek ::
    GHC.Ptr.Ptr Vision.DLib.Types.Rectangle.Rectangle
    -> GHC.Types.IO Vision.DLib.Types.Rectangle.Rectangle
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Vision.DLib.Types.Rectangle.$fStorableRectangle2
                  `cast`
                (<GHC.Ptr.Ptr Vision.DLib.Types.Rectangle.Rectangle>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Vision.DLib.Types.Rectangle.Rectangle>_R)) -}
d582a1c3f75b6044ab2b367fcbe4f3e2
  $fStorableRectangle_$cpeekByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> GHC.Types.IO Vision.DLib.Types.Rectangle.Rectangle
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Vision.DLib.Types.Rectangle.$fStorableRectangle4
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Vision.DLib.Types.Rectangle.Rectangle>_R)) -}
d582a1c3f75b6044ab2b367fcbe4f3e2
  $fStorableRectangle_$cpeekElemOff ::
    GHC.Ptr.Ptr Vision.DLib.Types.Rectangle.Rectangle
    -> GHC.Types.Int
    -> GHC.Types.IO Vision.DLib.Types.Rectangle.Rectangle
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Vision.DLib.Types.Rectangle.$fStorableRectangle6
                  `cast`
                (<GHC.Ptr.Ptr Vision.DLib.Types.Rectangle.Rectangle>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Vision.DLib.Types.Rectangle.Rectangle>_R)) -}
d582a1c3f75b6044ab2b367fcbe4f3e2
  $fStorableRectangle_$cpoke ::
    GHC.Ptr.Ptr Vision.DLib.Types.Rectangle.Rectangle
    -> Vision.DLib.Types.Rectangle.Rectangle -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S(S)S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U),1*U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Vision.DLib.Types.Rectangle.$fStorableRectangle1
                  `cast`
                (<GHC.Ptr.Ptr Vision.DLib.Types.Rectangle.Rectangle>_R
                 ->_R <Vision.DLib.Types.Rectangle.Rectangle>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
d582a1c3f75b6044ab2b367fcbe4f3e2
  $fStorableRectangle_$cpokeByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Vision.DLib.Types.Rectangle.Rectangle
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S(S)S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U),1*U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Vision.DLib.Types.Rectangle.$fStorableRectangle3
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Vision.DLib.Types.Rectangle.Rectangle>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
d582a1c3f75b6044ab2b367fcbe4f3e2
  $fStorableRectangle_$cpokeElemOff ::
    GHC.Ptr.Ptr Vision.DLib.Types.Rectangle.Rectangle
    -> GHC.Types.Int
    -> Vision.DLib.Types.Rectangle.Rectangle
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S(S)S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U),1*U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Vision.DLib.Types.Rectangle.$fStorableRectangle5
                  `cast`
                (<GHC.Ptr.Ptr Vision.DLib.Types.Rectangle.Rectangle>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Vision.DLib.Types.Rectangle.Rectangle>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
d582a1c3f75b6044ab2b367fcbe4f3e2
  $fStorableRectangle_$csizeOf ::
    Vision.DLib.Types.Rectangle.Rectangle -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Vision.DLib.Types.Rectangle.Rectangle) ->
                 Vision.DLib.Types.Rectangle.$fStorableRectangle8) -}
f982d1604d40052d35430468fd4c8848
  $tc'Rectangle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7099176520399878912##
                   2043097901155588194##
                   Vision.DLib.Types.Rectangle.$trModule
                   Vision.DLib.Types.Rectangle.$tc'Rectangle1) -}
e67f913ac164e56e09281114fc191a74
  $tc'Rectangle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Rectangle"#) -}
950f547d82b67652e0e23a5e097e0329
  $tcRectangle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5695108647699509739##
                   17258895550579891140##
                   Vision.DLib.Types.Rectangle.$trModule
                   Vision.DLib.Types.Rectangle.$tcRectangle1) -}
77f12a9964e33412d63aafa44d7bb756
  $tcRectangle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Rectangle"#) -}
535df51b1908778396bda35e64798cdf
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Vision.DLib.Types.Rectangle.$trModule2
                   Vision.DLib.Types.Rectangle.$trModule1) -}
1a427491bfbc90c71768d6f9f35675be
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Vision.DLib.Types.Rectangle"#) -}
6c8f951b376819b9f6e0f4b387886cdf
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "haskell-dlib-0.1.0.0-3fllyVSnE7s1R7uPGXF8Jy"#) -}
da634274346f0e45080674e0d97cb4d8
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Foreign.C.Types.CLong
    -> Foreign.C.Types.CLong
    -> Foreign.C.Types.CLong
    -> Foreign.C.Types.CLong
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 6,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Foreign.C.Types.CLong)
                   (ww2 :: Foreign.C.Types.CLong)
                   (ww3 :: Foreign.C.Types.CLong)
                   (ww4 :: Foreign.C.Types.CLong)
                   (w :: GHC.Base.String) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Vision.DLib.Types.Rectangle.$fShowRectangle8
                       (case ww1
                               `cast`
                             (UnsafeCo representational Foreign.C.Types.CLong GHC.Int.Int64) of wild { GHC.Int.I64# x# ->
                        case GHC.Show.$wshowSignedInt
                               0#
                               x#
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  Vision.DLib.Types.Rectangle.$fShowRectangle7
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     Vision.DLib.Types.Rectangle.$fShowRectangle6
                                     (case ww2
                                             `cast`
                                           (UnsafeCo representational Foreign.C.Types.CLong GHC.Int.Int64) of wild1 { GHC.Int.I64# x#1 ->
                                      case GHC.Show.$wshowSignedInt
                                             0#
                                             x#1
                                             (GHC.Base.++
                                                @ GHC.Types.Char
                                                Vision.DLib.Types.Rectangle.$fShowRectangle7
                                                (GHC.Base.++
                                                   @ GHC.Types.Char
                                                   Vision.DLib.Types.Rectangle.$fShowRectangle5
                                                   (case ww3
                                                           `cast`
                                                         (UnsafeCo representational Foreign.C.Types.CLong GHC.Int.Int64) of wild2 { GHC.Int.I64# x#2 ->
                                                    case GHC.Show.$wshowSignedInt
                                                           0#
                                                           x#2
                                                           (GHC.Base.++
                                                              @ GHC.Types.Char
                                                              Vision.DLib.Types.Rectangle.$fShowRectangle7
                                                              (GHC.Base.++
                                                                 @ GHC.Types.Char
                                                                 Vision.DLib.Types.Rectangle.$fShowRectangle4
                                                                 (case ww4
                                                                         `cast`
                                                                       (UnsafeCo representational Foreign.C.Types.CLong GHC.Int.Int64) of wild3 { GHC.Int.I64# x#3 ->
                                                                  case GHC.Show.$wshowSignedInt
                                                                         0#
                                                                         x#3
                                                                         (GHC.Base.++
                                                                            @ GHC.Types.Char
                                                                            Vision.DLib.Types.Rectangle.$fShowRectangle3
                                                                            x) of ww5 { (#,#) ww6 ww7 ->
                                                                  GHC.Types.:
                                                                    @ GHC.Types.Char
                                                                    ww6
                                                                    ww7 } }))) of ww5 { (#,#) ww6 ww7 ->
                                                    GHC.Types.:
                                                      @ GHC.Types.Char
                                                      ww6
                                                      ww7 } }))) of ww5 { (#,#) ww6 ww7 ->
                                      GHC.Types.:
                                        @ GHC.Types.Char
                                        ww6
                                        ww7 } }))) of ww5 { (#,#) ww6 ww7 ->
                        GHC.Types.: @ GHC.Types.Char ww6 ww7 } })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Vision.DLib.Types.Rectangle.$fShowRectangle2
                        (g w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Vision.DLib.Types.Rectangle.$fShowRectangle2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w))) }) -}
d582a1c3f75b6044ab2b367fcbe4f3e2
  data Rectangle
    = Rectangle {rectLeft :: Foreign.C.Types.CLong,
                 rectTop :: Foreign.C.Types.CLong,
                 rectRight :: Foreign.C.Types.CLong,
                 rectBottom :: Foreign.C.Types.CLong}
0946c658c0182c333f0b92e1b6cd4520
  rectBottom ::
    Vision.DLib.Types.Rectangle.Rectangle -> Foreign.C.Types.CLong
  RecSel Left Vision.DLib.Types.Rectangle.Rectangle
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLS),1*U(A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Vision.DLib.Types.Rectangle.Rectangle) ->
                 case ds of wild { Vision.DLib.Types.Rectangle.Rectangle ds1 ds2 ds3 ds4 ->
                 ds4 }) -}
34b0f2c3b778b0fa295ec580b4e918eb
  rectLeft ::
    Vision.DLib.Types.Rectangle.Rectangle -> Foreign.C.Types.CLong
  RecSel Left Vision.DLib.Types.Rectangle.Rectangle
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Vision.DLib.Types.Rectangle.Rectangle) ->
                 case ds of wild { Vision.DLib.Types.Rectangle.Rectangle ds1 ds2 ds3 ds4 ->
                 ds1 }) -}
4014174e557c66343bb524f0d82f4770
  rectRight ::
    Vision.DLib.Types.Rectangle.Rectangle -> Foreign.C.Types.CLong
  RecSel Left Vision.DLib.Types.Rectangle.Rectangle
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSL),1*U(A,A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Vision.DLib.Types.Rectangle.Rectangle) ->
                 case ds of wild { Vision.DLib.Types.Rectangle.Rectangle ds1 ds2 ds3 ds4 ->
                 ds3 }) -}
ee01e84573d7299632f516f1956e1e08
  rectTop ::
    Vision.DLib.Types.Rectangle.Rectangle -> Foreign.C.Types.CLong
  RecSel Left Vision.DLib.Types.Rectangle.Rectangle
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLL),1*U(A,1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Vision.DLib.Types.Rectangle.Rectangle) ->
                 case ds of wild { Vision.DLib.Types.Rectangle.Rectangle ds1 ds2 ds3 ds4 ->
                 ds2 }) -}
instance [safe] GHC.Show.Show [Vision.DLib.Types.Rectangle.Rectangle]
  = Vision.DLib.Types.Rectangle.$fShowRectangle
instance [safe] Foreign.Storable.Storable [Vision.DLib.Types.Rectangle.Rectangle]
  = Vision.DLib.Types.Rectangle.$fStorableRectangle
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

